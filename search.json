[{"title":"Hexo & GitHub Pages 搭建博客","url":"/2023/01/08/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","content":"<h1 id=\"Hexo-GitHub-Pages-搭建博客\"><a href=\"#Hexo-GitHub-Pages-搭建博客\" class=\"headerlink\" title=\"Hexo + GitHub Pages 搭建博客\"></a>Hexo + GitHub Pages 搭建博客</h1><p><strong>基本流程</strong></p>\n<ul>\n<li><p>搭建 Node.js 环境</p>\n</li>\n<li><p>搭建 Git 环境</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>GitHub 注册和配置</p>\n</li>\n<li><p>安装配置 Hexo</p>\n</li>\n<li><p>关联 Hexo 与 GitHub Pages</p>\n</li>\n<li><p>GitHub Pages 地址解析到个人域名</p>\n</li>\n<li><p>Hexo 的常用操作</p>\n</li>\n</ul>\n<h2 id=\"1-搭建-Node-js-环境\"><a href=\"#1-搭建-Node-js-环境\" class=\"headerlink\" title=\"1 搭建 Node.js 环境\"></a>1 搭建 Node.js 环境</h2><p><code>为什么要搭建 Node.js 环境？ - 因为 Hexo 博客系统是基于 Node.js 编写的</code></p>\n<p><code>Node.js</code> 是一个基于<code> Chrome V8</code> 引擎的 <code>JavaScript </code>运行环境，可以在非浏览器环境下，解释运行 <code>JS </code>代码。</p>\n<p>在 <code>Node.js</code> 官网：<a href=\"https://link.jianshu.com/?t=https://nodejs.org/en/\">https://nodejs.org/en/</a> 下载安装包 <code>18.12.1 LTS</code></p>\n<p>保持默认设置即可，一路<code>Next</code>，安装很快就结束了。</p>\n<p>然后打开命令提示符，输入 <code>node -v</code>、<code>npm -v</code>，出现版本号则说明 Node.js 环境配置成功，第一步完成！！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;node -v</span><br><span class=\"line\">v18.13.0</span><br><span class=\"line\">&gt;npm -v</span><br><span class=\"line\">8.19.3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-搭建-Git-环境\"><a href=\"#2-搭建-Git-环境\" class=\"headerlink\" title=\"2 搭建 Git 环境\"></a>2 搭建 Git 环境</h2><p><code>为什么要搭建 Git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。</code></p>\n<p><code>Git </code>是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>在<code> Git</code> 官网：<a href=\"https://git-scm.com/\">https://git-scm.com/</a> 下载安装包 <code>Git-2.39.0.2-64-bit.exe</code></p>\n<h2 id=\"3-GitHub-注册和配置\"><a href=\"#3-GitHub-注册和配置\" class=\"headerlink\" title=\"3 GitHub 注册和配置\"></a>3 GitHub 注册和配置</h2><p><code>GitHub </code>是一个代码托管平台，因为只支持 <code>Git </code>作为唯一的版本库格式进行托管，故名 GitHub。</p>\n<p><code>Github注册</code>：<a href=\"https://github.com/\">https://github.com/</a></p>\n<p>创建仓库：<code>Repository name </code>使用自己的用户名，仓库名规则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">username.github.io</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：<code>uesrname</code> 必须是你的用户名。README初始化也要勾上</p>\n<p>访问 <code>username.github.io</code>，如果可以正常访问，那么 <code>Github</code> 的配置已经结束了。</p>\n<p><img src=\"C:\\work\\个人博客\\images\\repository_name.PNG\"></p>\n<h2 id=\"安装配置-Hexo\"><a href=\"#安装配置-Hexo\" class=\"headerlink\" title=\"安装配置 Hexo\"></a>安装配置 Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。强烈建议你花20分钟区读一读 Hexo 的官方文档：<a href=\"https://link.jianshu.com/?t=https://hexo.io/zh-cn/\">https://hexo.io/zh-cn/</a></p>\n<p><strong>使用 npm 安装 Hexo</strong>：在命令行中输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;hexo -v</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo-cli: 4.3.0</span><br><span class=\"line\">os: win32 10.0.19044</span><br><span class=\"line\">node: 18.13.0</span><br><span class=\"line\">v8: 10.2.154.23-node.21</span><br><span class=\"line\">uv: 1.44.2</span><br><span class=\"line\">zlib: 1.2.13</span><br><span class=\"line\">brotli: 1.0.9</span><br><span class=\"line\">ares: 1.18.1</span><br><span class=\"line\">modules: 108</span><br><span class=\"line\">nghttp2: 1.51.0</span><br><span class=\"line\">napi: 8</span><br><span class=\"line\">llhttp: 6.0.10</span><br><span class=\"line\">uvwasi: 0.0.13</span><br><span class=\"line\">openssl: 3.0.7+quic</span><br><span class=\"line\">cldr: 42.0</span><br><span class=\"line\">icu: 72.1</span><br><span class=\"line\">tz: 2022f</span><br><span class=\"line\">unicode: 15.0</span><br><span class=\"line\">ngtcp2: 0.8.1</span><br><span class=\"line\">nghttp3: 0.7.0</span><br></pre></td></tr></table></figure>\n\n<p>执行下列命令来初始化我们的网站<code>blog</code>，Hexo 将会创建<code>blog</code>文件夹，文件夹中新建所需要的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n\n<p>显示如下信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class=\"line\">fatal: unable to access &#x27;https://github.com/hexojs/hexo-starter.git/&#x27;: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class=\"line\">WARN  git clone failed. Copying data instead</span><br><span class=\"line\">INFO  Install dependencies</span><br><span class=\"line\">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\work\\个人博客\\images\\hexo.PNG\"></p>\n<p>新建完成后，<code>blog</code>文件夹的目录如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── .github        <span class=\"comment\"># 需要部署的文件夹</span></span><br><span class=\"line\">├── node_modules    <span class=\"comment\"># Hexo插件</span></span><br><span class=\"line\">├── scaffolds       <span class=\"comment\"># 模板</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>          <span class=\"comment\"># 博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span></span><br><span class=\"line\">| └── _posts        <span class=\"comment\"># 文章</span></span><br><span class=\"line\">|    └── hello-world.md</span><br><span class=\"line\">├── themes          <span class=\"comment\"># 主题</span></span><br><span class=\"line\">├── _config.yml     <span class=\"comment\"># 全局配置文件</span></span><br><span class=\"line\">├── README.md     <span class=\"comment\"># 全局配置文件</span></span><br><span class=\"line\">├── .npmignore     </span><br><span class=\"line\">├── Gruntfile.js     <span class=\"comment\"># 全局配置文件</span></span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">└── package.json    <span class=\"comment\"># npm 依赖等</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>运行本地 Hexo 服务</strong></p>\n<p>接着输入<code>npm install</code>安装必备的组件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>显示如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">up to date, audited 236 packages in 6s</span><br><span class=\"line\"></span><br><span class=\"line\">20 packages are looking for funding</span><br><span class=\"line\">  run `npm fund` for details</span><br><span class=\"line\"></span><br><span class=\"line\">4 vulnerabilities (2 high, 2 critical)</span><br><span class=\"line\"></span><br><span class=\"line\">To address all issues (including breaking changes), run:</span><br><span class=\"line\">  npm audit fix --force</span><br><span class=\"line\"></span><br><span class=\"line\">Run `npm audit` for details.</span><br></pre></td></tr></table></figure>\n\n<p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p>显示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Files loaded in 77 ms</span><br><span class=\"line\">INFO  Generated: archives/2023/index.html</span><br><span class=\"line\">INFO  Generated: archives/index.html</span><br><span class=\"line\">INFO  Generated: fancybox/fancybox_loading.gif</span><br><span class=\"line\">INFO  Generated: index.html</span><br><span class=\"line\">INFO  Generated: fancybox/blank.gif</span><br><span class=\"line\">INFO  Generated: fancybox/fancybox_sprite@2x.png</span><br><span class=\"line\">INFO  Generated: fancybox/helpers/fancybox_buttons.png</span><br><span class=\"line\">INFO  Generated: fancybox/fancybox_loading@2x.gif</span><br><span class=\"line\">INFO  Generated: fancybox/fancybox_overlay.png</span><br><span class=\"line\">INFO  Generated: fancybox/fancybox_sprite.png</span><br><span class=\"line\">INFO  Generated: js/script.js</span><br><span class=\"line\">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class=\"line\">INFO  Generated: archives/2023/01/index.html</span><br><span class=\"line\">INFO  Generated: fancybox/jquery.fancybox.css</span><br><span class=\"line\">INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.js</span><br><span class=\"line\">INFO  Generated: css/style.css</span><br><span class=\"line\">INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.css</span><br><span class=\"line\">INFO  Generated: fancybox/helpers/jquery.fancybox-media.js</span><br><span class=\"line\">INFO  Generated: fancybox/jquery.fancybox.pack.js</span><br><span class=\"line\">INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.css</span><br><span class=\"line\">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class=\"line\">INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.js</span><br><span class=\"line\">INFO  Generated: fancybox/jquery.fancybox.js</span><br><span class=\"line\">INFO  Generated: css/images/banner.jpg</span><br><span class=\"line\">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class=\"line\">INFO  Generated: 2023/01/07/hello-world/index.html</span><br><span class=\"line\">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class=\"line\">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class=\"line\">INFO  28 files generated in 195 ms</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo server</span><br><span class=\"line\">或者</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>显示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n\n<p>您的网站会在 <a href=\"https://link.jianshu.com/?t=http://localhost:4000\">http://localhost:4000</a> 下启动。如果 <a href=\"https://link.jianshu.com/?t=http://localhost:4000\">http://localhost:4000</a> 能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。</p>\n<h2 id=\"关联-Hexo-与-GitHub-Pages\"><a href=\"#关联-Hexo-与-GitHub-Pages\" class=\"headerlink\" title=\"关联 Hexo 与 GitHub Pages\"></a>关联 Hexo 与 GitHub Pages</h2><p>首先右键打开<code>Git bash</code>，然后输入下面命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们如何让本地<code>Git</code>项目与远程的<code>Github</code>建立联系呢？用 <code>SSH keys</code></p>\n<p><strong>生成SSH keys</strong></p>\n<p>输入你自己的邮箱地址</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;XX<span class=\"keyword\">@qq</span>.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。</p>\n<p><strong>添加 SSH Key 到 GitHub</strong></p>\n<p>打开 <code>C:\\Users\\XX\\.ssh\\id_rsa.pub</code>，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到 <a href=\"https://link.jianshu.com/?t=https://github.com/settings/ssh\">https://github.com/settings/ssh</a> 的 <code>new SSH key</code> 中</p>\n<p><strong>测试</strong></p>\n<p>可以输入下面的命令，看看设置是否成功，<a href=\"https://link.jianshu.com/?t=mailto:git@github.com\">git@github.com</a>的部分不要修改：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git<span class=\"keyword\">@github</span>.com</span><br></pre></td></tr></table></figure>\n\n<p>如果是下面的反馈：</p>\n<blockquote>\n<p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes&#x2F;no)?</p>\n</blockquote>\n<p>不要紧张，输入yes就好，然后会看到：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\">Hi coder4nlp! You<span class=\"symbol\">&#x27;ve</span> successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置Git个人信息</strong></p>\n<p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。<br> Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name coder4nlp</span><br><span class=\"line\">git config --global user.email &quot;XX@qq.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置 Deployment</strong></p>\n<p>在<code>_config.yml</code>文件中，找到<code>Deployment</code>，然后按照如下修改，用户名改成你的：</p>\n<p>需要注意的是：冒号后面记得空一格！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  repo: git@github.com:coder4nlp/coder4nlp.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p><strong>本地文件提交到 GitHub Pages</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除旧的 public 文件</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成新的 public 文件</span></span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">或者</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>开始部署</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br><span class=\"line\">或者</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>显示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>\n\n<p>操作失败，则需要安装一个扩展</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中输入 <a href=\"https://coder4nlp.github.io/%EF%BC%88%E7%94%A8%E6%88%B7%E5%90%8D%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%EF%BC%89%E7%9C%8B%E5%88%B0%E4%BA%86\">https://coder4nlp.github.io/（用户名改成你的）看到了</a> Hexo 与 GitHub Pages 已经成功关联了.</p>\n<p><strong>注意</strong>：怎么避免 .md 文件被解析？</p>\n<p>Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到<code>public</code>文件夹中，在执行<code>hexo deploy</code>时将其复制到<code>.deploy_git</code>文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？</p>\n<p>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p>\n<h2 id=\"GitHub-Pages-地址解析到个人域名\"><a href=\"#GitHub-Pages-地址解析到个人域名\" class=\"headerlink\" title=\"GitHub Pages 地址解析到个人域名\"></a>GitHub Pages 地址解析到个人域名</h2><p>Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。</p>\n<p>看着博客的域名是二级域名，总有一种寄人篱下的感觉，为了让这个小窝看起来更加正式，我在阿里云上买了一个域名，打算将博客绑定自己的域名。</p>\n<p>进行该绑定过程，其实就是一个重定向的过程。</p>\n<p>在 GitHub 仓库的根目录下建立一个 <code>CNAME</code> 的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加<code>http://</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">www<span class=\"selector-class\">.lovebxm</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：CNAME 一定是在你 Github 项目的 master 根目录下</p>\n<p>进入<a href=\"https://link.jianshu.com/?t=https://dc.aliyun.com/tcparse/dns.htm\">阿里云域名解析地</a>址，添加解析：</p>\n<ol>\n<li>记录类型选择<code>CNAME</code></li>\n<li>主机记录填<code>www</code></li>\n<li>解析线路选择<code>默认</code></li>\n<li>记录值填<code>yourname.github.io</code></li>\n<li>TTL值为<code>10</code>分钟</li>\n<li>再添加一个解析，记录类型<code>A</code></li>\n<li>主机记录填<code>www</code></li>\n<li>解析线路选择<code>默认</code></li>\n<li>记录值填你GitHub 的ip地址（在cmd中ping：）</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">ping bxm0927<span class=\"selector-class\">.github</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5832745-cffe7e98c478b96e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/767/format/webp\" alt=\"img\"></p>\n<p>点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。</p>\n<p>域名绑定成功，域名解析成功，因此你在浏览中输入 <a href=\"https://link.jianshu.com/?t=http://www.lovebxm.com\">www.lovebxm.com</a>，或 <a href=\"https://link.jianshu.com/?t=http://lovebxm.com\">lovebxm.com</a> 就可以访问到博客了，输入 <a href=\"https://link.jianshu.com/?t=http://bxm0927.github.io\">bxm0927.github.io</a> 会重定向到  <a href=\"https://link.jianshu.com/?t=http://www.lovebxm.com\">www.lovebxm.com</a>。过程：www 的方式，会先解析成 <a href=\"https://link.jianshu.com/?t=http://xxxx.github.io\">http://xxxx.github.io</a>，然后根据 CNAME 再变成 www</p>\n<p><strong>注意</strong>：CNAME文件在下次 <code>hexo deploy</code>的时候就消失了，需要重新创建，这样就很繁琐</p>\n<p>方法一：每次 <code>hexo d</code> 之后，就去 GitHub 仓库根目录新建 CNAME文件</p>\n<p>方法二：在 <code>hexo g</code> 之后， <code>hexo d</code> 之前，把CNAME文件复制到 “\\public” 目录下面，里面写入你要绑定的域名。</p>\n<p>方法三（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。</p>\n<p>方法四：通过安装插件实现永久保留</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>npm install hexo-generator-cname --save</span><br></pre></td></tr></table></figure>\n\n<p>之后在_config.yml中添加一条</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins:</span><br><span class=\"line\">- hexo-generator-cname</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，在deploy上去即可。CNAME只允许一个域名地址。</p>\n<p><strong>注意1</strong>：每次生成的 CNAME 都是 yoursite.com 怎么解决？</p>\n<p>修改 _config.yml</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">url: http:<span class=\"comment\">//www.lovebxm.com</span></span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-的常用操作\"><a href=\"#Hexo-的常用操作\" class=\"headerlink\" title=\"Hexo 的常用操作\"></a>Hexo 的常用操作</h2><h3 id=\"发表一篇文章\"><a href=\"#发表一篇文章\" class=\"headerlink\" title=\"发表一篇文章\"></a>发表一篇文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;文章标题&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">D:\\GitHub\\Hexo\\<span class=\"built_in\">test</span>&gt;hexo new <span class=\"string\">&quot;文章标题&quot;</span></span><br><span class=\"line\">INFO  Created: D:\\GitHub\\Hexo\\<span class=\"built_in\">test</span>\\<span class=\"built_in\">source</span>\\_posts\\文章标题.md</span><br></pre></td></tr></table></figure>\n\n<p>在本地博客文件夹 <code>source\\_posts</code> 文件夹下，可以发现下面多了一个<code>.md</code>文件</p>\n<p>当然，我们也可以手动添加Markdown文件在<code>source\\_posts</code>文件夹下，其效果同样可以媲美<code>hexo new</code></p>\n<p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>当然你也可以执行下面的命令，相当于上面两条命令的效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"新建一个自定义页面\"><a href=\"#新建一个自定义页面\" class=\"headerlink\" title=\"新建一个自定义页面\"></a>新建一个自定义页面</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> page folder</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改主题\"><a href=\"#更改主题\" class=\"headerlink\" title=\"更改主题\"></a>更改主题</h3><p>官方主题库：<a href=\"https://link.jianshu.com/?t=https://hexo.io/themes/\">https://hexo.io/themes/</a></p>\n<p>Hexo主题非常，推荐使用 <code>Next</code> 为主题，请阅读 Next 的官方文档（ <a href=\"https://link.jianshu.com/?t=http://theme-next.iissnan.com/\">http://theme-next.iissnan.com/</a> ），5 分钟快速安装。</p>\n<p>再提示一点，大家可以hexo主题修改一步就hexo s看下变化，初次接触对参数不清楚。只有hexo s后在可以在本地浏览到效果，Ctrl+C 停止服务器。</p>\n<p>在 <code>themes</code> 文件夹中创建文件夹 <code>Hacker</code> ，将主题文件都复制粘贴至 <code>Hacker</code> 文件夹；</p>\n<p>然后在hexo全局配置文件 <code>_config.yml</code> 中应用主题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: Hacker</span><br></pre></td></tr></table></figure>\n\n<p>更换next主题，在<code>hexo s</code>时警告，页面空白，使用<code>hexo clean</code>解决</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">WARN  No layout: index.html</span><br><span class=\"line\">WARN  No layout: index.html</span><br><span class=\"line\">WARN  No layout: index.html</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>next主题配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>tags：</p>\n</li>\n<li><p>&#96;&#96;&#96;<br>title: 分类 #页面的头部显示<br>type: categories</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- categories：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>title: 标签 #页面的头部显示<br>type: tags</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 添加站点访问人数和总访问量</span><br><span class=\"line\"></span><br><span class=\"line\">修改next主题配置文件，搜索**busuanzi_count**</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>busuanzi_count:<br>enable: true<br>total_visitors: true<br>total_visitors_icon: user<br>total_views: true<br>total_views_icon: eye<br>post_views: true<br>post_views_icon: eye</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 添加搜索功能</span><br><span class=\"line\"></span><br><span class=\"line\">在博客根目录安装搜索插件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>npm install hexo-generator-search –save # 安装插件，用于生成博客索引数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">修改博客配置文件（根目录/_config.yml），添加以下代码</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>search:<br>path: search.json #之前就是这里出了问题导致图标错误，错误的教程是 search.xml<br>field: post<br>format: html<br>limit: 1000</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">修改主题的根目录配置文件(themes\\next_config.yml)，把enable的false改为true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>local_search:<br>enable: true</p>\n<h1 id=\"if-auto-trigger-search-by-changing-input\"><a href=\"#if-auto-trigger-search-by-changing-input\" class=\"headerlink\" title=\"if auto, trigger search by changing input\"></a>if auto, trigger search by changing input</h1><h1 id=\"if-manual-trigger-search-by-pressing-enter-key-or-search-button\"><a href=\"#if-manual-trigger-search-by-pressing-enter-key-or-search-button\" class=\"headerlink\" title=\"if manual, trigger search by pressing enter key or search button\"></a>if manual, trigger search by pressing enter key or search button</h1><p>trigger: auto</p>\n<h1 id=\"show-top-n-results-per-article-show-all-results-by-setting-to-1\"><a href=\"#show-top-n-results-per-article-show-all-results-by-setting-to-1\" class=\"headerlink\" title=\"show top n results per article, show all results by setting to -1\"></a>show top n results per article, show all results by setting to -1</h1><p>top_n_per_article: 1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">但是！！！！！！根据网络上的教程，我的搜索功能一部署到服务器就出现了搜索图标不正常显示，然后费劲九牛二虎之力才发现。那些教程只适用于旧版的hexo。</span><br><span class=\"line\"></span><br><span class=\"line\">![](https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy56enp5dWFuLmNuLzIwMjAwNzA1MTYzODU4LmpwZw?x-oss-process=image/format,png)</span><br><span class=\"line\"></span><br><span class=\"line\">安装插件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>npm install hexo-generator-searchdb –save # 安装插件，用于生成博客索引数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">NexT 一共有三个不同的仓库：</span><br><span class=\"line\"></span><br><span class=\"line\">| 版本            | 年份        | 仓库                                          |</span><br><span class=\"line\">| --------------- | ----------- | --------------------------------------------- |</span><br><span class=\"line\">| v5.1.4 或更低   | 2014 ~ 2017 | https://github.com/iissnan/hexo-theme-next    |</span><br><span class=\"line\">| v6.0.0 ~ v7.8.0 | 2018 ~ 2019 | https://github.com/theme-next/hexo-theme-next |</span><br><span class=\"line\">| v8.0.0 或更高   | 2020        | https://github.com/next-theme/hexo-theme-next |</span><br><span class=\"line\"></span><br><span class=\"line\">If you&#x27;re using **Hexo 5.0** or later, the simplest way to install is through npm:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>$ cd hexo-site<br>$ npm install hexo-theme-next</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Or you can clone the entire repository:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>$ cd hexo-site<br>$ git clone <a href=\"https://github.com/next-theme/hexo-theme-next\">https://github.com/next-theme/hexo-theme-next</a> themes&#x2F;next</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 启用分类和标签页面</span><br><span class=\"line\"></span><br><span class=\"line\">分类功能：执行 `hexo new page categories` ，然后修改生成的 `source/categories/index.md` </span><br><span class=\"line\"></span><br><span class=\"line\">### 文章如何添加多个标签</span><br><span class=\"line\"></span><br><span class=\"line\">有两种多标签格式</span><br><span class=\"line\"></span><br><span class=\"line\">```swift</span><br><span class=\"line\">tags: [a, b, c]</span><br><span class=\"line\">或</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - a</span><br><span class=\"line\">  - b</span><br><span class=\"line\">  - c</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"显示部分文章内容\"><a href=\"#显示部分文章内容\" class=\"headerlink\" title=\"显示部分文章内容\"></a>显示部分文章内容</h3><p>如果在博客文章列表中，不想全文显示，可以增加 <code>&lt;!--more--&gt;</code>, 后面的内容就不会显示在列表。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加插件\"><a href=\"#添加插件\" class=\"headerlink\" title=\"添加插件\"></a>添加插件</h3><p>添加 sitemap 和 feed 插件</p>\n<p>切换到你本地的 hexo 目 CIA ，在命令行窗口，输入以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed -save</span><br><span class=\"line\">npm install hexo-generator-sitemap -save</span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>_config.yml</code>，增加以下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\">Plugins:</span><br><span class=\"line\">- hexo-generator-feed</span><br><span class=\"line\">- hexo-generator-sitemap</span><br><span class=\"line\"><span class=\"comment\">#Feed Atom</span></span><br><span class=\"line\">feed:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  <span class=\"built_in\">limit</span>: 20</span><br><span class=\"line\"><span class=\"comment\">#sitemap</span></span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br></pre></td></tr></table></figure>\n\n<p>再执行以下命令，部署服务端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>配完之后，就可以访问 <a href=\"https://link.jianshu.com/?t=https://bxm0927.github.io/atom.xml\">https://bxm0927.github.io/atom.xml</a> 和 <a href=\"https://link.jianshu.com/?t=https://bxm0927.github.io/sitemap.xml\">https://bxm0927.github.io/sitemap.xml</a> ，发现这两个文件已经成功生成了。</p>\n<h3 id=\"添加-404-页面\"><a href=\"#添加-404-页面\" class=\"headerlink\" title=\"添加 404 页面\"></a>添加 404 页面</h3><p>GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5832745-61e2dcbbdd421a12.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/667/format/webp\" alt=\"img\"></p>\n<p>其实，404页面可以做更多有意义的事，来做个404公益项目吧。</p>\n<p>推荐使用腾讯公益404 <a href=\"https://link.jianshu.com/?t=http://www.qq.com/404/\">http://www.qq.com/404/</a> ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">src</span>=<span class=\"string\">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">homePageUrl</span>=<span class=\"string\">&quot;http://www.lovebxm.com/&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">homePageName</span>=<span class=\"string\">&quot;回到我的主页&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>复制上面代码，贴粘到目录下新建的404.html即可！</p>\n<h3 id=\"多PC同步管理博客\"><a href=\"#多PC同步管理博客\" class=\"headerlink\" title=\"多PC同步管理博客\"></a>多PC同步管理博客</h3><p>很多人可能家里一台笔记本，公司一个台式机，想两个同时管理博客，同时达到备份的博客主题、文章、配置的目的。下面就介绍一下用github来备份博客并同步博客。</p>\n<ol>\n<li>A电脑备份博客内容到github</li>\n</ol>\n<p>配置.gitignore文件。进入博客目录文件夹下，找到此文件，用sublime text 打开，在最后增加两行内容&#x2F;.deploy_git和&#x2F;public</p>\n<ol>\n<li>初始化仓库。</li>\n</ol>\n<p>在博客根目录下，在git bash下依次执行git init和git remote add origin <server> <server>为远程仓库地址。</p>\n<ol>\n<li>同步到远程仓库。</li>\n</ol>\n<p>gitbash下依次执行以下命令</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">add</span> . <span class=\"meta\">#添加目录下所有文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;更新说明&quot;</span> <span class=\"meta\">#提交并添加更新说明</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push -u origin master <span class=\"meta\">#推送更新到远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>B电脑拉下远程仓库文件</li>\n</ol>\n<p>在B电脑上同样先安装好node、git、ssh、hexo，然后建好hexo文件夹，安装好插件，（然后选做：将备份到远程仓库的文件及文件夹删除），然后执行以下命令：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">init</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote <span class=\"keyword\">add</span> origin &lt;server&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发布博客后同步</li>\n</ol>\n<p>在B电脑发布完博客之后，记得将博客备份同步到远程仓库<br> 执行以下命令：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">add</span> .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#可以用git master 查看更改内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;更新信息&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push -u origin master  <span class=\"meta\">#以后每次提交可以直接git push</span></span><br></pre></td></tr></table></figure>\n\n<p>平时同步管理<br> 每次想写博客时，先执行：git pull进行同步更新。发布完文章后同样按照上面的 发布博客后同步 同步到远程仓库。</p>\n<h3 id=\"中文乱码\"><a href=\"#中文乱码\" class=\"headerlink\" title=\"中文乱码\"></a>中文乱码</h3><p>在 md 文件中写中文内容，发布出来后为乱码，原因是 md 的编码不对，将 md 文件另存为<code>UTF-8</code>编码的文件即可解决问题。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>建站的系统有很多，如：</p>\n<ul>\n<li><a href=\"https://link.jianshu.com/?t=https://hexo.io/zh-cn/\">Hexo + GitHub Pages</a></li>\n<li><a href=\"https://link.jianshu.com/?t=http://jekyll.com.cn/\">Jekyll + GitHub Pages</a></li>\n<li><a href=\"https://link.jianshu.com/?t=https://cn.wordpress.org/\">WordPress + 服务器 + 域名</a></li>\n<li><a href=\"https://link.jianshu.com/?t=http://www.dedecms.com/\">DeDeCMS + 服务器 + 域名</a></li>\n<li>…</li>\n</ul>\n<p>使用 Hexo + GitHub Pages 建站，有优点也有缺点：</p>\n<ul>\n<li>GitHub Pages 不支持数据库管理，所以你只能做静态页面的博客，不能像其他博客（如 WordPress）那样通过数据库管理自己的博客内容。</li>\n<li>但是，GitHub Pages 无需购置服务器，免服务器费的同时还能做负载均衡，github pages有300M免费空间。</li>\n<li>个人博客真的有必要用数据库吗？答案是否定的。博客静态化，评论记录使用第三方的 <a href=\"https://link.jianshu.com/?t=https://gentie.163.com/info.html\">网易云跟帖</a>就可以了。静态的博客更有利于搜索引擎蜘蛛爬取，轻量化的感觉真的很好。</li>\n<li>通过 Hexo 你可以轻松地使用 Markdown 编写文章，非常符合我的口味。Markdown 真的是专门针对程序员开发的语言啊，现在感觉没有 Markdown什么都不想写。什么富文本编辑器，什么word，太麻烦了！而且样式都好丑！效率太低！</li>\n</ul>\n<p>推荐几个很好用的在线 Markdown 编辑器：</p>\n<ul>\n<li>作业部落：<a href=\"https://link.jianshu.com/?t=https://www.zybuluo.com/mdeditor\">https://www.zybuluo.com/mdeditor</a></li>\n<li>马克飞象：<a href=\"https://link.jianshu.com/?t=https://maxiang.io\">https://maxiang.io</a></li>\n</ul>\n<p>推荐图床：</p>\n<ul>\n<li><a href=\"https://link.jianshu.com/?t=https://jiantuku.com/#/\">极简图床 + chrome 插件 + 七牛空间</a>，七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.jianshu.com/p/39562a0d8eb6\">https://www.jianshu.com/p/39562a0d8eb6</a></p>\n<p><a href=\"https://godweiyang.com/2018/04/13/hexo-blog/\">https://godweiyang.com/2018/04/13/hexo-blog/</a></p>\n"}]