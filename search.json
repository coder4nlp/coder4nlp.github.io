[{"title":"Hexo & GitHub Pages 搭建博客","url":"/2023/01/08/Hexo-GitHub-Pages-搭建博客/","content":"\n# Hexo + GitHub Pages 搭建博客\n\n**基本流程**\n\n* 搭建 Node.js 环境\n\n* 搭建 Git 环境\n\n* GitHub 注册和配置\n\n* 安装配置 Hexo\n\n* 关联 Hexo 与 GitHub Pages\n\n* GitHub Pages 地址解析到个人域名\n\n* Hexo 的常用操作\n\n<!--more-->\n\n## 1 搭建 Node.js 环境\n\n`为什么要搭建 Node.js 环境？ - 因为 Hexo 博客系统是基于 Node.js 编写的`\n\n`Node.js` 是一个基于` Chrome V8` 引擎的 `JavaScript `运行环境，可以在非浏览器环境下，解释运行 `JS `代码。\n\n在 `Node.js` 官网：[https://nodejs.org/en/](https://link.jianshu.com?t=https://nodejs.org/en/) 下载安装包 `18.12.1 LTS`\n\n保持默认设置即可，一路`Next`，安装很快就结束了。\n\n然后打开命令提示符，输入 `node -v`、`npm -v`，出现版本号则说明 Node.js 环境配置成功，第一步完成！！！\n\n```\n>node -v\nv18.13.0\n>npm -v\n8.19.3\n```\n\n## 2 搭建 Git 环境\n\n`为什么要搭建 Git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。`\n\n`Git `是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\n在` Git` 官网：https://git-scm.com/ 下载安装包 `Git-2.39.0.2-64-bit.exe`\n\n## 3 GitHub 注册和配置\n\n`GitHub `是一个代码托管平台，因为只支持 `Git `作为唯一的版本库格式进行托管，故名 GitHub。\n\n`Github注册`：https://github.com/\n\n创建仓库：`Repository name `使用自己的用户名，仓库名规则：\n\n```undefined\nusername.github.io\n```\n\n**注意**：`uesrname` 必须是你的用户名。README初始化也要勾上\n\n访问 `username.github.io`，如果可以正常访问，那么 `Github` 的配置已经结束了。\n\n![](C:\\work\\个人博客\\images\\repository_name.PNG)\n\n## 安装配置 Hexo\n\nHexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。强烈建议你花20分钟区读一读 Hexo 的官方文档：[https://hexo.io/zh-cn/](https://link.jianshu.com/?t=https://hexo.io/zh-cn/)\n\n**使用 npm 安装 Hexo**：在命令行中输入\n\n```undefined\nnpm install hexo-cli -g\n```\n\n安装完后输入`hexo -v`验证是否安装成功。\n\n```\n>hexo -v\n```\n\n```\nhexo-cli: 4.3.0\nos: win32 10.0.19044\nnode: 18.13.0\nv8: 10.2.154.23-node.21\nuv: 1.44.2\nzlib: 1.2.13\nbrotli: 1.0.9\nares: 1.18.1\nmodules: 108\nnghttp2: 1.51.0\nnapi: 8\nllhttp: 6.0.10\nuvwasi: 0.0.13\nopenssl: 3.0.7+quic\ncldr: 42.0\nicu: 72.1\ntz: 2022f\nunicode: 15.0\nngtcp2: 0.8.1\nnghttp3: 0.7.0\n```\n\n执行下列命令来初始化我们的网站`blog`，Hexo 将会创建`blog`文件夹，文件夹中新建所需要的文件。\n\n```\nhexo init blog\n```\n\n显示如下信息\n\n```\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nfatal: unable to access 'https://github.com/hexojs/hexo-starter.git/': OpenSSL SSL_read: Connection was reset, errno 10054\nWARN  git clone failed. Copying data instead\nINFO  Install dependencies\nINFO  Start blogging with Hexo!\n```\n\n![](C:\\work\\个人博客\\images\\hexo.PNG)\n\n新建完成后，`blog`文件夹的目录如下：\n\n```bash\n.\n├── .github        # 需要部署的文件夹\n├── node_modules    # Hexo插件\n├── scaffolds       # 模板\n├── source          # 博客正文和其他源文件，404、favicon、CNAME 都应该放在这里\n| └── _posts        # 文章\n|    └── hello-world.md\n├── themes          # 主题\n├── _config.yml     # 全局配置文件\n├── README.md     # 全局配置文件\n├── .npmignore     \n├── Gruntfile.js     # 全局配置文件\n├── LICENSE\n└── package.json    # npm 依赖等\n```\n\n**运行本地 Hexo 服务**\n\n接着输入`npm install`安装必备的组件\n\n```css\ncd blog\nnpm install\n```\n\n显示如下：\n\n```\nup to date, audited 236 packages in 6s\n\n20 packages are looking for funding\n  run `npm fund` for details\n\n4 vulnerabilities (2 high, 2 critical)\n\nTo address all issues (including breaking changes), run:\n  npm audit fix --force\n\nRun `npm audit` for details.\n```\n\n这样本地的网站配置也弄好啦，输入`hexo g`生成静态网页，然后输入`hexo s`打开本地服务器，然后浏览器打开\n\n```\nhexo g\n```\n\n显示\n\n```\nINFO  Validating config\nINFO  Start processing\nINFO  Files loaded in 77 ms\nINFO  Generated: archives/2023/index.html\nINFO  Generated: archives/index.html\nINFO  Generated: fancybox/fancybox_loading.gif\nINFO  Generated: index.html\nINFO  Generated: fancybox/blank.gif\nINFO  Generated: fancybox/fancybox_sprite@2x.png\nINFO  Generated: fancybox/helpers/fancybox_buttons.png\nINFO  Generated: fancybox/fancybox_loading@2x.gif\nINFO  Generated: fancybox/fancybox_overlay.png\nINFO  Generated: fancybox/fancybox_sprite.png\nINFO  Generated: js/script.js\nINFO  Generated: css/fonts/fontawesome-webfont.ttf\nINFO  Generated: archives/2023/01/index.html\nINFO  Generated: fancybox/jquery.fancybox.css\nINFO  Generated: fancybox/helpers/jquery.fancybox-buttons.js\nINFO  Generated: css/style.css\nINFO  Generated: fancybox/helpers/jquery.fancybox-buttons.css\nINFO  Generated: fancybox/helpers/jquery.fancybox-media.js\nINFO  Generated: fancybox/jquery.fancybox.pack.js\nINFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.css\nINFO  Generated: css/fonts/fontawesome-webfont.eot\nINFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.js\nINFO  Generated: fancybox/jquery.fancybox.js\nINFO  Generated: css/images/banner.jpg\nINFO  Generated: css/fonts/fontawesome-webfont.svg\nINFO  Generated: 2023/01/07/hello-world/index.html\nINFO  Generated: css/fonts/fontawesome-webfont.woff\nINFO  Generated: css/fonts/FontAwesome.otf\nINFO  28 files generated in 195 ms\n```\n\n```undefined\nhexo server\n或者\nhexo s\n```\n\n显示\n\n```\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n```\n\n您的网站会在 [http://localhost:4000](https://link.jianshu.com?t=http://localhost:4000) 下启动。如果 [http://localhost:4000](https://link.jianshu.com?t=http://localhost:4000) 能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。\n\n## 关联 Hexo 与 GitHub Pages\n\n首先右键打开`Git bash`，然后输入下面命令：\n\n```bash\n\n```\n\n我们如何让本地`Git`项目与远程的`Github`建立联系呢？用 `SSH keys`\n\n**生成SSH keys**\n\n输入你自己的邮箱地址\n\n```css\nssh-keygen -t rsa -C \"XX@qq.com\"\n```\n\n在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。\n\n**添加 SSH Key 到 GitHub**\n\n打开 `C:\\Users\\XX\\.ssh\\id_rsa.pub`，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到 [https://github.com/settings/ssh](https://link.jianshu.com?t=https://github.com/settings/ssh) 的 `new SSH key` 中\n\n**测试**\n\n可以输入下面的命令，看看设置是否成功，[git@github.com](https://link.jianshu.com/?t=mailto:git@github.com)的部分不要修改：\n\n```css\nssh -T git@github.com\n```\n\n如果是下面的反馈：\n\n> The authenticity of host 'github.com (207.97.227.239)' can't be established.\n> RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n> Are you sure you want to continue connecting (yes/no)?\n\n不要紧张，输入yes就好，然后会看到：\n\n```rust\nHi coder4nlp! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n**配置Git个人信息**\n\n现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。\n Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。\n\n```\ngit config --global user.name coder4nlp\ngit config --global user.email \"XX@qq.com\"\n```\n\n**配置 Deployment**\n\n在`_config.yml`文件中，找到`Deployment`，然后按照如下修改，用户名改成你的：\n\n需要注意的是：冒号后面记得空一格！\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: 'git'\n  repo: git@github.com:coder4nlp/coder4nlp.github.io.git\n  branch: main\n```\n\n**本地文件提交到 GitHub Pages**\n\n```cpp\n// 删除旧的 public 文件\nhexo clean\n\n// 生成新的 public 文件\nhexo generate\n或者\nhexo g\n\n\n```\n\n**开始部署**\n\n```\nhexo deploy\n或者\nhexo d\n```\n\n显示\n\n```\nINFO  Validating config\nERROR Deployer not found: git\n```\n\n操作失败，则需要安装一个扩展\n\n```\nnpm install hexo-deployer-git --save\n```\n\n在浏览器中输入 https://coder4nlp.github.io/（用户名改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了.\n\n**注意**：怎么避免 .md 文件被解析？\n\nHexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到`public`文件夹中，在执行`hexo deploy`时将其复制到`.deploy_git`文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？\n\n在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。\n\n## GitHub Pages 地址解析到个人域名\n\nGithub Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。\n\n看着博客的域名是二级域名，总有一种寄人篱下的感觉，为了让这个小窝看起来更加正式，我在阿里云上买了一个域名，打算将博客绑定自己的域名。\n\n进行该绑定过程，其实就是一个重定向的过程。\n\n在 GitHub 仓库的根目录下建立一个 `CNAME` 的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加`http://`\n\n```css\nwww.lovebxm.com\n```\n\n注意：CNAME 一定是在你 Github 项目的 master 根目录下\n\n进入[阿里云域名解析地](https://link.jianshu.com?t=https://dc.aliyun.com/tcparse/dns.htm)址，添加解析：\n\n1. 记录类型选择`CNAME`\n2. 主机记录填`www`\n3. 解析线路选择`默认`\n4. 记录值填`yourname.github.io`\n5. TTL值为`10`分钟\n6. 再添加一个解析，记录类型`A`\n7. 主机记录填`www`\n8. 解析线路选择`默认`\n9. 记录值填你GitHub 的ip地址（在cmd中ping：）\n\n```css\nping bxm0927.github.com\n```\n\n![img](https:////upload-images.jianshu.io/upload_images/5832745-cffe7e98c478b96e.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/767/format/webp)\n\n点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。\n\n域名绑定成功，域名解析成功，因此你在浏览中输入 [www.lovebxm.com](https://link.jianshu.com?t=http://www.lovebxm.com)，或 [lovebxm.com](https://link.jianshu.com?t=http://lovebxm.com) 就可以访问到博客了，输入 [bxm0927.github.io](https://link.jianshu.com?t=http://bxm0927.github.io) 会重定向到  [www.lovebxm.com](https://link.jianshu.com?t=http://www.lovebxm.com)。过程：www 的方式，会先解析成 [http://xxxx.github.io](https://link.jianshu.com?t=http://xxxx.github.io)，然后根据 CNAME 再变成 www\n\n**注意**：CNAME文件在下次 `hexo deploy`的时候就消失了，需要重新创建，这样就很繁琐\n\n方法一：每次 `hexo d` 之后，就去 GitHub 仓库根目录新建 CNAME文件\n\n方法二：在 `hexo g` 之后， `hexo d` 之前，把CNAME文件复制到 \"\\public\" 目录下面，里面写入你要绑定的域名。\n\n方法三（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。\n\n方法四：通过安装插件实现永久保留\n\n```ruby\n$ npm install hexo-generator-cname --save\n```\n\n之后在_config.yml中添加一条\n\n```undefined\nplugins:\n- hexo-generator-cname\n```\n\n需要注意的是：如果是在github上建立的CNAME文件，需要先clone到本地，然后安装插件，在deploy上去即可。CNAME只允许一个域名地址。\n\n**注意1**：每次生成的 CNAME 都是 yoursite.com 怎么解决？\n\n修改 _config.yml\n\n```cpp\nurl: http://www.lovebxm.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\n\n## Hexo 的常用操作\n\n### 发表一篇文章\n\n```bash\nhexo new \"文章标题\"\n\nD:\\GitHub\\Hexo\\test>hexo new \"文章标题\"\nINFO  Created: D:\\GitHub\\Hexo\\test\\source\\_posts\\文章标题.md\n```\n\n在本地博客文件夹 `source\\_posts` 文件夹下，可以发现下面多了一个`.md`文件\n\n当然，我们也可以手动添加Markdown文件在`source\\_posts`文件夹下，其效果同样可以媲美`hexo new`\n\n编写完markdown文件后，根目录下输入`hexo g`生成静态网页，然后输入`hexo s`可以本地预览效果，最后输入`hexo d`上传到github上。这时打开你的github.io主页就能看到发布的文章啦。\n\n```undefined\nhexo clean\n\nhexo g\n\nhexo d\n```\n\n当然你也可以执行下面的命令，相当于上面两条命令的效果\n\n```undefined\nhexo clean\n\nhexo d -g\n```\n\n\n\n### 新建一个自定义页面\n\n```cpp\nhexo new page folder\n```\n\n### 更改主题\n\n官方主题库：[https://hexo.io/themes/](https://link.jianshu.com?t=https://hexo.io/themes/)\n\nHexo主题非常，推荐使用 `Next` 为主题，请阅读 Next 的官方文档（ [http://theme-next.iissnan.com/](https://link.jianshu.com?t=http://theme-next.iissnan.com/) ），5 分钟快速安装。\n\n再提示一点，大家可以hexo主题修改一步就hexo s看下变化，初次接触对参数不清楚。只有hexo s后在可以在本地浏览到效果，Ctrl+C 停止服务器。\n\n在 `themes` 文件夹中创建文件夹 `Hacker` ，将主题文件都复制粘贴至 `Hacker` 文件夹；\n\n然后在hexo全局配置文件 `_config.yml` 中应用主题：\n\n```\ntheme: Hacker\n```\n\n更换next主题，在`hexo s`时警告，页面空白，使用`hexo clean`解决\n\n```\nWARN  No layout: index.html\nWARN  No layout: index.html\nWARN  No layout: index.html\n```\n\n```\nhexo new page tags\n```\n\nnext主题配置\n\n```\nhexo new page about\nhexo new page tags\nhexo new page categories\n```\n\n- tags：\n\n- ```\n  title: 分类 #页面的头部显示\n  type: categories\n  ```\n\n- categories：\n\n```\ntitle: 标签 #页面的头部显示\ntype: tags\n```\n\n### 添加站点访问人数和总访问量\n\n修改next主题配置文件，搜索**busuanzi_count**\n\n```\nbusuanzi_count:\n  enable: true\n  total_visitors: true\n  total_visitors_icon: user\n  total_views: true\n  total_views_icon: eye\n  post_views: true\n  post_views_icon: eye\n```\n\n## 添加搜索功能\n\n在博客根目录安装搜索插件\n\n```\nnpm install hexo-generator-search --安装插件，用于生成博客索引数据\n```\n\n修改博客配置文件（根目录/_config.yml），添加以下代码\n\n```\nsearch:\n  path: search.json #之前就是这里出了问题导致图标错误，错误的教程是 search.xml\n  field: post\n  format: html\n  limit: 1000\n```\n\n修改主题的根目录配置文件(themes\\next_config.yml)，把enable的false改为true\n\n```\nlocal_search:\n  enable: true\n  # if auto, trigger search by changing input\n  # if manual, trigger search by pressing enter key or search button\n  trigger: auto\n  # show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n```\n\n### 启用分类和标签页面\n\n分类功能：执行 `hexo new page categories` ，然后修改生成的 `source/categories/index.md` \n\n### 文章如何添加多个标签\n\n有两种多标签格式\n\n```swift\ntags: [a, b, c]\n或\ntags:\n  - a\n  - b\n  - c\n```\n\n### 显示部分文章内容\n\n如果在博客文章列表中，不想全文显示，可以增加 `<!--more-->`, 后面的内容就不会显示在列表。\n\n```xml\n<!--more-->\n```\n\n### 添加插件\n\n添加 sitemap 和 feed 插件\n\n切换到你本地的 hexo 目 CIA ，在命令行窗口，输入以下命令\n\n\n\n```undefined\nnpm install hexo-generator-feed -save\nnpm install hexo-generator-sitemap -save\n```\n\n修改 `_config.yml`，增加以下内容\n\n\n\n```bash\n# Extensions\nPlugins:\n- hexo-generator-feed\n- hexo-generator-sitemap\n#Feed Atom\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n#sitemap\nsitemap:\n  path: sitemap.xml\n```\n\n再执行以下命令，部署服务端\n\n\n\n```undefined\nhexo d -g\n```\n\n配完之后，就可以访问 [https://bxm0927.github.io/atom.xml](https://link.jianshu.com?t=https://bxm0927.github.io/atom.xml) 和 [https://bxm0927.github.io/sitemap.xml](https://link.jianshu.com?t=https://bxm0927.github.io/sitemap.xml) ，发现这两个文件已经成功生成了。\n\n### 添加 404 页面\n\nGitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。\n\n![img](https:////upload-images.jianshu.io/upload_images/5832745-61e2dcbbdd421a12.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/667/format/webp)\n\n其实，404页面可以做更多有意义的事，来做个404公益项目吧。\n\n推荐使用腾讯公益404 [http://www.qq.com/404/](https://link.jianshu.com?t=http://www.qq.com/404/) ：\n\n\n\n```xml\n<script type=\"text/javascript\"\n        src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\"\n        charset=\"utf-8\"\n        homePageUrl=\"http://www.lovebxm.com/\"\n        homePageName=\"回到我的主页\">\n</script>\n```\n\n复制上面代码，贴粘到目录下新建的404.html即可！\n\n### 多PC同步管理博客\n\n很多人可能家里一台笔记本，公司一个台式机，想两个同时管理博客，同时达到备份的博客主题、文章、配置的目的。下面就介绍一下用github来备份博客并同步博客。\n\n1. A电脑备份博客内容到github\n\n配置.gitignore文件。进入博客目录文件夹下，找到此文件，用sublime text 打开，在最后增加两行内容/.deploy_git和/public\n\n1. 初始化仓库。\n\n在博客根目录下，在git bash下依次执行git init和git remote add origin <server> <server>为远程仓库地址。\n\n1. 同步到远程仓库。\n\ngitbash下依次执行以下命令\n\n\n\n```csharp\ngit add . #添加目录下所有文件\n\ngit commit -m \"更新说明\" #提交并添加更新说明\n\ngit push -u origin master #推送更新到远程仓库\n```\n\n1. B电脑拉下远程仓库文件\n\n在B电脑上同样先安装好node、git、ssh、hexo，然后建好hexo文件夹，安装好插件，（然后选做：将备份到远程仓库的文件及文件夹删除），然后执行以下命令：\n\n\n\n```csharp\ngit init\n\ngit remote add origin <server>\n\ngit fetch --all\n\ngit reset --hard origin/master\n```\n\n1. 发布博客后同步\n\n在B电脑发布完博客之后，记得将博客备份同步到远程仓库\n 执行以下命令：\n\n\n\n```csharp\ngit add .\n\n#可以用git master 查看更改内容\n\ngit commit -m \"更新信息\"\n\ngit push -u origin master  #以后每次提交可以直接git push\n```\n\n平时同步管理\n 每次想写博客时，先执行：git pull进行同步更新。发布完文章后同样按照上面的 发布博客后同步 同步到远程仓库。\n\n### 中文乱码\n\n在 md 文件中写中文内容，发布出来后为乱码，原因是 md 的编码不对，将 md 文件另存为`UTF-8`编码的文件即可解决问题。\n\n## 结束语\n\n建站的系统有很多，如：\n\n- [Hexo + GitHub Pages](https://link.jianshu.com?t=https://hexo.io/zh-cn/)\n- [Jekyll + GitHub Pages](https://link.jianshu.com?t=http://jekyll.com.cn/)\n- [WordPress + 服务器 + 域名](https://link.jianshu.com?t=https://cn.wordpress.org/)\n- [DeDeCMS + 服务器 + 域名](https://link.jianshu.com?t=http://www.dedecms.com/)\n- ...\n\n使用 Hexo + GitHub Pages 建站，有优点也有缺点：\n\n- GitHub Pages 不支持数据库管理，所以你只能做静态页面的博客，不能像其他博客（如 WordPress）那样通过数据库管理自己的博客内容。\n- 但是，GitHub Pages 无需购置服务器，免服务器费的同时还能做负载均衡，github pages有300M免费空间。\n- 个人博客真的有必要用数据库吗？答案是否定的。博客静态化，评论记录使用第三方的 [网易云跟帖](https://link.jianshu.com?t=https://gentie.163.com/info.html)就可以了。静态的博客更有利于搜索引擎蜘蛛爬取，轻量化的感觉真的很好。\n- 通过 Hexo 你可以轻松地使用 Markdown 编写文章，非常符合我的口味。Markdown 真的是专门针对程序员开发的语言啊，现在感觉没有 Markdown什么都不想写。什么富文本编辑器，什么word，太麻烦了！而且样式都好丑！效率太低！\n\n推荐几个很好用的在线 Markdown 编辑器：\n\n- 作业部落：[https://www.zybuluo.com/mdeditor](https://link.jianshu.com?t=https://www.zybuluo.com/mdeditor)\n- 马克飞象：[https://maxiang.io](https://link.jianshu.com?t=https://maxiang.io)\n\n推荐图床：\n\n- [极简图床 + chrome 插件 + 七牛空间](https://link.jianshu.com?t=https://jiantuku.com/#/)，七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。\n\n# 参考\n\nhttps://www.jianshu.com/p/39562a0d8eb6\n\nhttps://godweiyang.com/2018/04/13/hexo-blog/\n"}]